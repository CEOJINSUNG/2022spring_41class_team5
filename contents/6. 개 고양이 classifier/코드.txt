(예시코드 1)

class data_preprocessor():
    def __init__(self,path):
        self.path=path


(예시코드 2)
class data_preprocessor():
    def __init__(self,path):
        self.path=path
    
    def data_preprocess(self):

        path_dog=self.path+'/dogs'
        path_cat=self.path+'/cats'

        # bring dog images : lable 0
        x_dogs=[np.array(image.load_img(path_dog+'/dog.{}.jpg'.format(i+1),target_size=(150,150))) for i in range(0,1500)]

        # bring cat images : lable 1
        x_cats=[np.array(image.load_img(path_cat+'/cat.{}.jpg'.format(i+1),target_size=(150,150))) for i in range(0,1500)]

        x_dogs=np.array(x_dogs)
        x_cats=np.array(x_cats)

        # make target and lables
        x_data=np.concatenate((x_dogs,x_cats))
        y_data=np.concatenate((np.full(len(x_dogs),0),np.full(len(x_cats),1)))
        
        x_data=x_data.astype('float32') / 255.

        # make train,test,validation set
        x_train,x_test,y_train,y_test=train_test_split(x_data,y_data,stratify=y_data,test_size=0.1)
        x_train,x_val,y_train,y_val=train_test_split(x_train,y_train,stratify=y_train,test_size=0.1)

        return x_train,y_train,x_val,y_val,x_test,y_test

(예시 코드3)
def get_model():

    model=Sequential()

    model.add(Conv2D(16,(3,3),activation='relu',input_shape=(150,150,3)))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(32,(3,3),activation='relu'))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(64,(3,3),activation='relu'))
    model.add(MaxPooling2D((2,2)))
    
    model.add(Flatten())
    model.add(Dense(512,activation='relu'))
    model.add(Dense(1,activation='sigmoid'))

    model.summary()

    return model



(예시 코드4)
path='./dataset/'

d=dp.data_preprocessor(path)

x_train,y_train,x_val,y_val,x_test,y_test=d.data_preprocess()

cnn=model.get_model()

cnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])

history=cnn.fit(x_train,y_train,epochs=10,batch_size=64,validation_data=(x_val,y_val))

results=cnn.evaluate(x_test,y_test)
print(f'accuracy: {results[1]*100:.2f}')

